terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "eu-west-2"
}
resource "aws_vpc" "main" {
  cidr_block       = "192.168.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "main"
  }
}
resource "aws_subnet" "public-subnet-1" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "192.168.1.0/24"
  map_public_ip_on_launch = true


  tags = {
    Name = "public-subnet-1"
  }
}
resource "aws_subnet" "public-subnet-2" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "192.168.3.0/24"
  map_public_ip_on_launch = true


  tags = {
    Name = "public-subnet-2"
  }
}
resource "aws_subnet" "private-subnet-1" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "192.168.5.0/24"
  


  tags = {
    Name = "private-subnet-1"
  }
}
resource "aws_subnet" "private-subnet-2" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "192.168.7.0/24"
  


  tags = {
    Name = "private-subnet-2"
  }
}
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "igw"
  }
}
resource "aws_eip" "nat_eip" {}


resource "aws_nat_gateway" "my_nat_gateway" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public-subnet-1.id
}
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "public-route-table"
  }
}
resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.public-subnet-1.id
  route_table_id = aws_route_table.public.id
}
resource "aws_route_table_association" "b" {
  subnet_id     = aws_subnet.public-subnet-2.id
  route_table_id = aws_route_table.public.id
}
resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.my_nat_gateway.id
  }

  tags = {
    Name = "private-route-table"
  }
}
resource "aws_route_table_association" "a2" {
  subnet_id      = aws_subnet.private-subnet-1.id
  route_table_id = aws_route_table.private.id
}
resource "aws_route_table_association" "b2" {
  subnet_id      = aws_subnet.private-subnet-2.id
  route_table_id = aws_route_table.private.id
}
resource "aws_security_group" "new" {
  name        = "example-security-group"
  description = "Security group for example application"
  vpc_id      = aws_vpc.main.id  # Reference the VPC ID directly

  // Define inbound rules
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow SSH access from anywhere
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow HTTP access from anywhere
  }

  // Define outbound rules
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"           # Allow all outbound traffic
    cidr_blocks = ["0.0.0.0/0"]
  }

  // Optional: Define tags for the security group
  tags = {
    Name = "example-security-group"
  }
}

resource "aws_instance" "public_instance" {
  ami                    = "ami-09885f3ec1667cbfc"
  instance_type          = "t2.micro"
  
  tags = {
    Name = "public-instance"
  }
  vpc_security_group_ids = [aws_security_group.new.id]
  subnet_id              = aws_subnet.public-subnet-1.id 
  
  user_data = <<-EOF
               #!/bin/bash
               yum update -y
               yum install httpd -y
               systemctl start httpd.service
               echo "hello world" > /var/www/html/index.html
               systemctl restart httpd.service
               systemctl enable httpd.service
               EOF
}
resource "aws_instance" "private_instance" {
  ami                    = "ami-09885f3ec1667cbfc"
  instance_type          = "t2.micro"
  
  tags = {
    Name = "private-instance"
  }
  vpc_security_group_ids = [aws_security_group.new.id]
  subnet_id              = aws_subnet.private-subnet-1.id 
}
